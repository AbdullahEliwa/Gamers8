// <auto-generated />
using System;
using Booking.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gamers8.Infrastructure.Migrations
{
    [DbContext(typeof(Gamers8Context))]
    partial class Gamers8ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Gamers8.Core.Entities.SharedAggregate.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Gamers8.Core.Entities.SharedAggregate.Speaker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LinkedInProfile")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SocialMediaProfile")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("IsActive");

                    b.ToTable("Speakers");
                });

            modelBuilder.Entity("Gamers8.Core.Entities.SharedAggregate.Tag", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Name");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Gamers8.Core.Entities.SummitAggregate.Summit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte?>("AgeGroupFrom")
                        .HasColumnType("tinyint");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeaturedEvent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIncludedInEntranceTicket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("RequireSignup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("SeasonZone")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.ToTable("Summits");
                });

            modelBuilder.Entity("Gamers8.Core.Entities.SummitAggregate.SummitDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.ToTable("SummitDays");
                });

            modelBuilder.Entity("Gamers8.Core.Entities.SummitAggregate.SummitSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("SeasonZone")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.ToTable("SummitSessions");
                });

            modelBuilder.Entity("SpeakerSummit", b =>
                {
                    b.Property<Guid>("SpeakersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SummitsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SpeakersId", "SummitsId");

                    b.HasIndex("SummitsId");

                    b.ToTable("SpeakerSummit");
                });

            modelBuilder.Entity("SummitTag", b =>
                {
                    b.Property<Guid>("SummitsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TagsName")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SummitsId", "TagsName");

                    b.HasIndex("TagsName");

                    b.ToTable("SummitTag");
                });

            modelBuilder.Entity("Gamers8.Core.Entities.SharedAggregate.Country", b =>
                {
                    b.OwnsOne("Booking.Core.ValueObjects.DescriptionLocalized", "Name", b1 =>
                        {
                            b1.Property<int>("CountryId")
                                .HasColumnType("int");

                            b1.Property<string>("DescriptionAr")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("TitleAr");

                            b1.Property<string>("DescriptionEn")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("TitleEn");

                            b1.HasKey("CountryId");

                            b1.ToTable("Countries");

                            b1.WithOwner()
                                .HasForeignKey("CountryId");
                        });

                    b.Navigation("Name");
                });

            modelBuilder.Entity("Gamers8.Core.Entities.SharedAggregate.Speaker", b =>
                {
                    b.HasOne("Gamers8.Core.Entities.SharedAggregate.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Booking.Core.ValueObjects.DescriptionLocalized", "Brief", b1 =>
                        {
                            b1.Property<Guid>("SpeakerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("DescriptionAr")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)")
                                .HasColumnName("BriefAr");

                            b1.Property<string>("DescriptionEn")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)")
                                .HasColumnName("BriefEn");

                            b1.HasKey("SpeakerId");

                            b1.ToTable("Speakers");

                            b1.WithOwner()
                                .HasForeignKey("SpeakerId");
                        });

                    b.OwnsOne("Booking.Core.ValueObjects.DescriptionLocalized", "Employer", b1 =>
                        {
                            b1.Property<Guid>("SpeakerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("DescriptionAr")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("EmployerAr");

                            b1.Property<string>("DescriptionEn")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("EmployerEn");

                            b1.HasKey("SpeakerId");

                            b1.ToTable("Speakers");

                            b1.WithOwner()
                                .HasForeignKey("SpeakerId");
                        });

                    b.OwnsOne("Booking.Core.ValueObjects.DescriptionLocalized", "JobTitle", b1 =>
                        {
                            b1.Property<Guid>("SpeakerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("DescriptionAr")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("JobTitleAr");

                            b1.Property<string>("DescriptionEn")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("JobTitleEn");

                            b1.HasKey("SpeakerId");

                            b1.ToTable("Speakers");

                            b1.WithOwner()
                                .HasForeignKey("SpeakerId");
                        });

                    b.OwnsOne("Booking.Core.ValueObjects.DescriptionLocalized", "Name", b1 =>
                        {
                            b1.Property<Guid>("SpeakerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("DescriptionAr")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("NameAr");

                            b1.Property<string>("DescriptionEn")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("NameEn");

                            b1.HasKey("SpeakerId");

                            b1.ToTable("Speakers");

                            b1.WithOwner()
                                .HasForeignKey("SpeakerId");
                        });

                    b.Navigation("Brief");

                    b.Navigation("Country");

                    b.Navigation("Employer");

                    b.Navigation("JobTitle");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("Gamers8.Core.Entities.SummitAggregate.Summit", b =>
                {
                    b.OwnsOne("Booking.Core.ValueObjects.DateTimeRange", "DateTime", b1 =>
                        {
                            b1.Property<Guid>("SummitId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("End")
                                .HasColumnType("Date")
                                .HasColumnName("EndingDate");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("Date")
                                .HasColumnName("StartingDate");

                            b1.HasKey("SummitId");

                            b1.ToTable("Summits");

                            b1.WithOwner()
                                .HasForeignKey("SummitId");
                        });

                    b.OwnsOne("Booking.Core.ValueObjects.DescriptionLocalized", "DefaultImagePath", b1 =>
                        {
                            b1.Property<Guid>("SummitId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("DescriptionAr")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)")
                                .HasColumnName("DefaultImagePathAr");

                            b1.Property<string>("DescriptionEn")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)")
                                .HasColumnName("DefaultImagePathEn");

                            b1.HasKey("SummitId");

                            b1.ToTable("Summits");

                            b1.WithOwner()
                                .HasForeignKey("SummitId");
                        });

                    b.OwnsOne("Booking.Core.ValueObjects.DescriptionLocalized", "FactsSheet", b1 =>
                        {
                            b1.Property<Guid>("SummitId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("DescriptionAr")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("NameAr");

                            b1.Property<string>("DescriptionEn")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("NameEn");

                            b1.HasKey("SummitId");

                            b1.ToTable("Summits");

                            b1.WithOwner()
                                .HasForeignKey("SummitId");
                        });

                    b.OwnsOne("Booking.Core.ValueObjects.DescriptionLocalized", "ProgramFilePath", b1 =>
                        {
                            b1.Property<Guid>("SummitId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("DescriptionAr")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)")
                                .HasColumnName("ProgramFilePathAr");

                            b1.Property<string>("DescriptionEn")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)")
                                .HasColumnName("ProgramFilePathEn");

                            b1.HasKey("SummitId");

                            b1.ToTable("Summits");

                            b1.WithOwner()
                                .HasForeignKey("SummitId");
                        });

                    b.OwnsOne("Booking.Core.ValueObjects.DescriptionLocalized", "Title", b1 =>
                        {
                            b1.Property<Guid>("SummitId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("DescriptionAr")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("TitleAr");

                            b1.Property<string>("DescriptionEn")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("TitleEn");

                            b1.HasKey("SummitId");

                            b1.ToTable("Summits");

                            b1.WithOwner()
                                .HasForeignKey("SummitId");
                        });

                    b.Navigation("DateTime");

                    b.Navigation("DefaultImagePath");

                    b.Navigation("FactsSheet");

                    b.Navigation("ProgramFilePath");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Gamers8.Core.Entities.SummitAggregate.SummitSession", b =>
                {
                    b.OwnsOne("Booking.Core.ValueObjects.DateTimeRange", "DateTime", b1 =>
                        {
                            b1.Property<Guid>("SummitSessionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("End")
                                .HasColumnType("datetime2")
                                .HasColumnName("EndingTime");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime2")
                                .HasColumnName("StartingTime");

                            b1.HasKey("SummitSessionId");

                            b1.ToTable("SummitSessions");

                            b1.WithOwner()
                                .HasForeignKey("SummitSessionId");
                        });

                    b.OwnsOne("Booking.Core.ValueObjects.DescriptionLocalized", "Desciption", b1 =>
                        {
                            b1.Property<Guid>("SummitSessionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("DescriptionAr")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("NameAr");

                            b1.Property<string>("DescriptionEn")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("NameEn");

                            b1.HasKey("SummitSessionId");

                            b1.ToTable("SummitSessions");

                            b1.WithOwner()
                                .HasForeignKey("SummitSessionId");
                        });

                    b.OwnsOne("Booking.Core.ValueObjects.DescriptionLocalized", "Title", b1 =>
                        {
                            b1.Property<Guid>("SummitSessionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("DescriptionAr")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("TitleAr");

                            b1.Property<string>("DescriptionEn")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("TitleEn");

                            b1.HasKey("SummitSessionId");

                            b1.ToTable("SummitSessions");

                            b1.WithOwner()
                                .HasForeignKey("SummitSessionId");
                        });

                    b.Navigation("DateTime");

                    b.Navigation("Desciption");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("SpeakerSummit", b =>
                {
                    b.HasOne("Gamers8.Core.Entities.SharedAggregate.Speaker", null)
                        .WithMany()
                        .HasForeignKey("SpeakersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gamers8.Core.Entities.SummitAggregate.Summit", null)
                        .WithMany()
                        .HasForeignKey("SummitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SummitTag", b =>
                {
                    b.HasOne("Gamers8.Core.Entities.SummitAggregate.Summit", null)
                        .WithMany()
                        .HasForeignKey("SummitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gamers8.Core.Entities.SharedAggregate.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
